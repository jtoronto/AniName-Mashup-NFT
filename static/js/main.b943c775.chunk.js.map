{"version":3,"sources":["assets/twitter-logo.svg","assets/loading-waiting.gif","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","TOTAL_MINT_COUNT","MAX_COUNT","App","useState","currentAccount","setCurrentAccount","connectedToWrongNetwork","setConnectedToWrongNetwork","totalMintCount","setTotalMintCount","maxTokens","setMaxTokens","currentlyMining","setCurrentlyMining","CONTRACT_ADDRESS","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","chainId","connectWallet","alert","setupWalletEventListener","on","_chainId","location","reload","_accounts","error","setupNFTMinedEventListener","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","AniNameMash","abi","from","tokenId","toNumber","getTotalNFTsMintedSoFar","connectedContract","getTotalMintCount","askContractToMintNft","makeAnAniMashNFT","nftTxn","wait","hash","useEffect","className","onClick","style","color","paddingTop","paddingBottom","src","loadingSpinner","height","width","href","target","rel","bottom","display","alt","twitterLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b943c775.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","export default __webpack_public_path__ + \"static/media/loading-waiting.ccaed95b.gif\";","import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport loadingSpinner from \"./assets/loading-waiting.gif\";\nimport AniNameMash from \"./utils/AniNameMash.json\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst TWITTER_HANDLE = \"jtoronto34\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/collection/anime-name-mash-nft\";\nvar TOTAL_MINT_COUNT = 0; //Literally only using these for console.log right now since state doesn't update immediately,\nvar MAX_COUNT = 0\n\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [connectedToWrongNetwork, setConnectedToWrongNetwork] = useState(true);\n  const [totalMintCount, setTotalMintCount] = useState(0);\n  const [maxTokens, setMaxTokens] = useState(0);\n  const [currentlyMining, setCurrentlyMining] = useState(false);\n\n  const [randomCatImage, setRandomCatImage] = useState();\n  //const CONTRACT_ADDRESS = \"0x14cB57c69D3F8BfE8aB6213Bb2F97eaF5fb98799\"; //Ganache local\n  const CONTRACT_ADDRESS = \"0x30D0AF864900DAb72CA98557ad6979fD14b30354\"; //Rinkeby \n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(accounts[0]);\n\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\n      console.log(\"Connected to chain \" + chainId);\n      // String, hex code of the chainId of the Rinkebey test network\n      const rinkebyChainId = \"0x4\"; \n      if (chainId === rinkebyChainId) {\n        setConnectedToWrongNetwork(false);\n      }\n      \n      //setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  // Setup our listener.\n  const setupWalletEventListener = async () =>{\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        //Set up wallet chain listener  \n        ethereum.on('chainChanged', (_chainId) => {\n          console.log('user chain changed to', _chainId);\n          window.location.reload()}\n        );\n        //set up account chain listener\n        ethereum.on('accountsChanged', (_accounts) => window.location.reload());\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  const setupNFTMinedEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n       \n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          AniNameMash.abi,\n          signer\n        );\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        \n        connectedContract.on(\"NewAniMashMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n          getTotalNFTsMintedSoFar();\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTotalNFTsMintedSoFar = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          AniNameMash.abi,\n          provider\n        );\n\n       TOTAL_MINT_COUNT = (await connectedContract.getTotalMintCount()).toNumber();\n        setTotalMintCount(TOTAL_MINT_COUNT);\n        console.log(\"Total mint count:\", TOTAL_MINT_COUNT);\n\n        MAX_COUNT = (await connectedContract.maxTokens()).toNumber();\n        setMaxTokens(MAX_COUNT);\n        console.log(\"Max allowed tokens\", MAX_COUNT);\n\n      } else {\n        //MAX_COUNT = (await connectedContract.maxTokens()).toNumber();\n        \n        \n        \n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          AniNameMash.abi,\n          signer\n        );\n\n        if (TOTAL_MINT_COUNT >= MAX_COUNT){\n          alert(\"Sorry but the maximum amount of tokens has already been minted\");\n          return;\n        }\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnAniMashNFT();\n        setupNFTMinedEventListener();\n\n        console.log(\"Mining...please wait.\");\n        setCurrentlyMining(true);\n        await nftTxn.wait();\n        setCurrentlyMining(false);\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    setupWalletEventListener();\n    getTotalNFTsMintedSoFar();\n  }, []);\n\n  /*\n   * Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n   */\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          {\n             connectedToWrongNetwork && (\n              <div className=\"connectedIndicator\">\n                You aren't connected to the rinkeby network\n              </div>\n             )\n\n          }\n          \n          <p className=\"header gradient-text\">Anime Name Mashup</p>\n          <p className=\"sub-text\">\n            Mash up 3 anime character names and enjoy as an NFT.\n          </p>\n          {currentAccount === \"\" ? (\n            <button\n              onClick={connectWallet}\n              className=\"cta-button connect-wallet-button\"\n            >\n              Connect to Wallet\n            </button>\n          ) : (\n            <button\n              onClick={askContractToMintNft}\n              className=\"cta-button connect-wallet-button\"\n            >\n              Mint NFT\n            </button>\n          )}\n          <div style={{color: 'white', paddingTop: '20px'}}>{totalMintCount} of {maxTokens} tokens minted!</div>\n          {\n            currentlyMining &&(<div className=\"miningIndicator\">\n            <div style={{paddingBottom: '30px'}}>Mining, please wait...</div>\n            <div><img src={loadingSpinner} height=\"100\" width=\"100\" /></div>\n\n          </div>)\n          }\n           \n        </div>\n        <div className=\"footer-container\">\n        \n        <a href={OPENSEA_LINK} \n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n            <button\n            style={{bottom:'20px'}}\n              className=\"cta-button connect-wallet-button\">\n                  See the collection on OpenSea  \n                   </button>  </a>\n          <div style={{display:\"flex\",\n                      paddingTop:'50px'}}>\n                          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n                            <a\n                              className=\"footer-text\"\n                              href={TWITTER_LINK}\n                              target=\"_blank\"\n                              rel=\"noreferrer\"\n                            >{`built by @${TWITTER_HANDLE}`}</a></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}